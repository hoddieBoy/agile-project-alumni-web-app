name: Check, Analyze and Deploy on Push

on:
  push:
    branches:
      - main

concurrency:
  group: push-workflow-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sonar-analyze-backend:
    uses: ./.github/workflows/sonar-backend.yml
    secrets:
      PRIVATE_SECRET_PEM: ${{ secrets.PRIVATE_SECRET_PEM }}
      SONAR_TOKEN_BACKEND: ${{ secrets.SONAR_TOKEN_BACKEND }}

  sonar-analyze-frontend:
    uses: ./.github/workflows/sonar-frontend.yml
    secrets:
      SONAR_TOKEN_FRONTEND: ${{ secrets.SONAR_TOKEN_FRONTEND }}

  deploy:
    name: Deploy to AWS ECS Instance
    runs-on: ubuntu-latest
    needs:
      - sonar-analyze-backend
      - sonar-analyze-frontend
    env:
      API_PORT: 8081
      APP_NAME: alumni-fil-api
      FRONTEND_PORT: 8080
      TAG: latest
      BUILD_TARGET: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all history is fetched

      - name: Create environment file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "API_PORT=${{ env.API_PORT }}" >> .env
          echo "APP_NAME=${{ env.APP_NAME }}" >> .env
          echo "FRONTEND_PORT=${{ env.FRONTEND_PORT }}" >> .env
          echo "REGISTRY_URL=${{ secrets.REGISTRY_URL }}" >> .env
          echo "TAG=${{ env.TAG }}" >> .env
          echo "BUILD_TARGET=${{ env.BUILD_TARGET }}" >> .env

      - name: Build and Publish Docker image
        run: |
          docker compose build -f docker-compose.prod.yml
          docker compose push -f docker-compose.prod.yml

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ECS_INSTANCE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.ECS_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Send files to ECS Instance
        run: |
          scp -i ~/.ssh/id_rsa .env ${{ secrets.ECS_INSTANCE_USER }}@${{ secrets.ECS_INSTANCE_IP }}:~/app/.env
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.ECS_INSTANCE_USER }}@${{ secrets.ECS_INSTANCE_IP }}:~/app/docker-compose.yml

      - name: Deploy to AWS ECS Instance
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.ECS_INSTANCE_USER }}@${{ secrets.ECS_INSTANCE_IP }}
          cd ~/app
          docker compose pull
          docker compose up -d